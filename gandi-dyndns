#!/usr/bin/python
# -*- coding: utf-8 -*-

import re
import xmlrpclib
import getopt
import sys
import urllib2
from xml.dom import minidom

api = xmlrpclib.ServerProxy('https://rpc.gandi.net/xmlrpc/')

def main():
    apikey = ''
    domain = ''
    record = ''
    ttl = 0
    rtypes = []
    quiet=False
    printChange=False

    from optparse import OptionParser
    optp = OptionParser()
    optp.add_option('-a', '--api',    help='Specifier clé API')
    optp.add_option('-d', '--domain', help='Spécifier domaine')
    optp.add_option('-4', '--ipv4',   help='Activer IPv4', action='store_true')
    optp.add_option('-6', '--ipv6',   help='Activer IPv6', action='store_true')
    optp.add_option('-r', '--record', help='Spécifier un enregistrement')
    optp.add_option('-t', '--ttl',    help='Spécifier un temps de vie (defaut = 300)')
    optp.add_option('--extip4', help='Force une adresse IPv4 externe. Cela peut-être utilisé pour mettre à jour un enregistrement avec une autre IP que celle du serveur ou de la station qui exécute ce script')
    optp.add_option('--extip6', help='Force une adresse IPv4 externe. Cela peut-être utilisé pour mettre à jour un enregistrement avec une autre IP que celle du serveur ou de la station qui exécute ce script')
    optp.add_option('-q', '--quiet',    help='Pas de sortie excepté la sortie Erreur', action='store_true')
    optp.add_option('-p', '--printChange', help='Sortie standard pour un changement d\'IP', action='store_true')
    (opts, args) = optp.parse_args()
   
    # Process
    if opts.ipv4: rtypes.append('A')
    if opts.ipv6: rtypes.append('AAAA')
    domain = opts.domain
    apikey = opts.api
    record = opts.record    
    extip4 = opts.extip4
    extip6 = opts.extip6
    ttl    = opts.ttl
    ttl    = int (ttl)
    if opts.quiet: quiet=True
    if opts.printChange:
      printChange = True
      quiet = True
    
    if apikey == None or apikey == '':
        print >> sys.stderr, ("Pas de clé API spécifiée")
        usage()
        sys.exit(79)
        
    #This call will always return true. cf comment regarding check_if_apikey_exists    
    if check_if_apikey_exists(apikey) == False:
        print >> sys.stderr, ("La clé API " + apikey + " n'existe pas ou est mal retranscrite")
        usage()
        sys.exit(80)
        
    if domain == None:
        print >> sys.stderr, ("No Domain specified")
        usage()
        sys.exit(81)
        
    if check_if_domain_exists(apikey, domain) == False:
        print >> sys.stderr, ("Le domaine " + domain + " n'existe pas")
        usage()
        sys.exit(82)
    
    # Default
    if not rtypes:
        rtypes = ['A']

    addresses = {}

    if check_if_ttl_is_correct (ttl) == False:
        print >> sys.stderr, ("Le TTL de " + str(ttl)  + " est trop court (minimum 300). Il a été ramené automatiquement à 300")
        ttl = 300
        usage()

    for rtype in rtypes:
        if check_if_record_exists(apikey, get_zoneid_by_domain(apikey, domain), record, rtype) == False:
            print >> sys.stderr, (rtype + " Record " + record + " n'existe pas, créez le avant.")
            usage()
            sys.exit(83)

        if rtype == 'A':
            if extip4 != "" and not extip4 == None:
                address = extip4
            else :
                address = get_public_ipv4()
        elif rtype == 'AAAA':
            if extip6 != "" and not extip6 == None:
                address = extip6
            else :
                address = get_public_ipv6()
        if not address:
            print >> sys.stderr,  ("Aucune adresse pour le type d'enregistrement '" + rtype + "'")
            sys.exit(84)
        addresses[rtype] = address
        
    # Fetch the active zone id
    zone_id = get_zoneid_by_domain(apikey, domain)
    
    # Check if the current IPv4 address changed
    for rtype in rtypes:
        ip_changed = check_if_ip_changed(apikey, zone_id, record, rtype, addresses[rtype])
        if not ip_changed:
            if not quiet:
				      print ("L'IP pour '" + record + "' n'a pas changé.")
            sys.exit(0) 
    
    # Create a new zone version for zone id
    version_id = create_new_zone_version(apikey, zone_id)
    
    for rtype in rtypes:
        # Update the record for the zone id and zone version
        update_record(apikey, zone_id, version_id, record, rtype, addresses[rtype] , ttl)
        if not quiet or printChange:
			    print record + " " + rtype + " " + addresses[rtype]

    # Activate the new zone
    api.domain.zone.version.set(apikey, zone_id, version_id)

def usage():
    print("Usage: gandi-dyndns --api=<APIKEY> --domain=<DOMAIN> --record=<RECORD> [--ipv4] [--ipv6] [--quiet] [--printChange] [--ttl=<TTL>]")
    print("Example: gandi-dyndns --api=123ApIkEyFrOmGanDi --domain=example.com --record=www --ipv4")

def api_version(apikey):
    return api.version.info(apikey)

def zone_list(apikey):
    return api.domain.zone.list(apikey)

def zone_record_list(apikey, zone_id):
    return api.domain.zone.record.list(apikey, zone_id, 0)

def create_new_zone_version(apikey, zone_id):
    return api.domain.zone.version.new(apikey, zone_id)

def domain_info(apikey, domain):
    return api.domain.info(apikey, domain)

def get_zoneid_by_domain(apikey, domain):
    return domain_info(apikey, domain)['zone_id']

def get_public_ipv4():
    connect = urllib2.urlopen("http://192.168.1.1/api/?method=wan.getInfo")
    data = connect.read()
    connect.close()
    doc = minidom.parseString(data)
    element = doc.documentElement.childNodes[1]
    try:
    	ip = element.getAttribute ('ip_addr')
    except:
    	ip = None
    return ip

def get_public_ipv6():
    data = urllib2.urlopen("http://icanhazipv6.com").read()
    matches = re.search('<p class="my_address">(.*?)</p>', data)
    if matches:
      return matches.group(1)
    return None

def update_record(apikey, zone_id, zone_version, record, rtype, value , ttl):
    delete_record(apikey, zone_id, zone_version, record, rtype)
    insert_record(apikey, zone_id, zone_version, record, rtype, value, ttl)    

def delete_record(apikey, zone_id, zone_version, record, rtype):
    recordListOptions = {"name": record,
                         "type": rtype}

    records = api.domain.zone.record.delete(apikey, zone_id, zone_version, recordListOptions)

def insert_record(apikey, zone_id, zone_version, record, rtype, value ,ttl):
    zoneRecord = {"name": record, 
                  "ttl": ttl, 
                  "type": rtype, 
                  "value": value}

    api.domain.zone.record.add(apikey, zone_id, zone_version, zoneRecord)

def check_if_ttl_is_correct(ttl):
    if ttl < 300:
        return False
    return True

def check_if_domain_exists(apikey, domain):
    try:
        api.domain.info(apikey, domain)
        return True
    except xmlrpclib.Fault as err:
        return False

#will always return true, even with malformed or empty apikey.
#api.version.info(apikey) in api_version returns a valid API version
#even if apikey is empty string or None.
def check_if_apikey_exists(apikey):
    try:
        api_version(apikey)
        return True
    except xmlrpclib.Fault as err:
        return False

def check_if_record_exists(apikey, zone_id, record, rtype): 
    recordListOptions = {"name": record, 
                         "type": rtype}

    records = api.domain.zone.record.list(apikey, zone_id, 0, recordListOptions)
    if len(records) > 0:
        return True

    return False

def check_if_ip_changed(apikey, zone_id, record, rtype, external_ip):
    recordListOptions = {"name": record,
                         "type": rtype}
    
    records = api.domain.zone.record.list(apikey, zone_id, 0, recordListOptions)
    if len(records) > 0:
        for record in records:
            if record['value'] == external_ip:
                return False
            
        return True
        
    return False

if __name__ == "__main__":
    main()

# ###########################################################################
# Editor
#
# vim:sts=2:ts=2:sw=2:et
# ###########################################################################
